[31mDuplicatedSlotName: Slot #'autor' appeared twice in Respuesta
[0m[ :other | 
other name = current name
	ifTrue: [ DuplicatedSlotName new
			oldSlot: current;
			newSlot: other;
			host: host;
			signal ] ] in FixedLayout(PointerLayout)>>checkSlotNames in Block: [ :other | ...
OrderedCollection>>do:
FixedLayout(PointerLayout)>>checkSlotNames
FixedLayout(PointerLayout)>>checkSanity
Respuesta class(ClassDescription)>>superclass:withLayoutType:slots:
ShDefaultBuilderEnhancer>>configureClass:superclass:withLayoutType:slots:
ShiftClassBuilder>>createClass
ShiftClassBuilder>>build
[ builder oldClass: oldClass.
self copyClassSlotsFromExistingClass.
newClass := builder build.
self installInEnvironment: newClass.
self installSubclassInSuperclass: newClass.
builder builderEnhancer beforeMigratingClass: builder installer: self.
builder builderEnhancer migrateToClass: newClass installer: self.
builder builderEnhancer afterMigratingClass: builder installer: self.
builder builderEnhancer
	propagateChangesToRelatedClasses: newClass
	installer: self ] in ShiftClassInstaller>>make in Block: [ builder oldClass: oldClass....
BlockClosure>>on:do:
ShiftClassInstaller>>make
ShiftClassInstaller>>make:
ShiftClassInstaller class>>make:
Pregunta class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
Pregunta class(Class)>>subclass:instanceVariableNames:classVariableNames:package:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
ClySystemEnvironment>>compileANewClassFrom:notifying:startingFrom:
ClyFullBrowser>>compileANewClassFrom:notifying:startingFrom:
ClyClassDefinitionEditorToolMorph>>applyChanges
[ self changesAreAboutApply.
applied := self applyChanges ] in [ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
applied := self applyChanges ]
	on: Error
	do: [ :err | 
		textModel text: self editingText.
		textMorph hasUnacceptedEdits: true.
		err pass ].
applied
	ifTrue: [ textMorph hasUnacceptedEdits: false.
		self textUpdated.
		browser focusActiveTab ]
	ifFalse: [ textModel text: self editingText.
		textMorph hasUnacceptedEdits: true ] ] in ClyClassDefinitionEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted in Block: [ self changesAreAboutApply....
BlockClosure>>on:do:
[ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
applied := self applyChanges ]
	on: Error
	do: [ :err | 
		textModel text: self editingText.
		textMorph hasUnacceptedEdits: true.
		err pass ].
applied
	ifTrue: [ textMorph hasUnacceptedEdits: false.
		self textUpdated.
		browser focusActiveTab ]
	ifFalse: [ textModel text: self editingText.
		textMorph hasUnacceptedEdits: true ] ] in ClyClassDefinitionEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted in Block: [ textMorph hasUnacceptedEdits: true....
BlockClosure>>ensure:
ClyClassDefinitionEditorToolMorph(ClyTextEditorToolMorph)>>applyChangesBy:
ClyClassDefinitionEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver: in Block: [ action cull: anAnnouncement cull: announcer ]
[0m[31m#isTemp was sent to nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #isTemp
UndefinedObject>>doesNotUnderstand: #isTemp
OCASTSemanticAnalyzer>>visitVariableNode:
RBVariableNode>>acceptVisitor:
OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitNode:
OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitMessageNode:
RBMessageNode>>acceptVisitor:
OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitNode:
OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitReturnNode:
RBReturnNode>>acceptVisitor:
OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitNode:
[ :each | self visitNode: each ] in OCASTSemanticAnalyzer>>visitSequenceNode: in Block: [ :each | self visitNode: each ]
Array(SequenceableCollection)>>do:
OCASTSemanticAnalyzer>>visitSequenceNode:
RBSequenceNode>>acceptVisitor:
OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitNode:
OCASTSemanticAnalyzer>>visitMethodNode:
RBMethodNode>>acceptVisitor:
OCASTSemanticAnalyzer(RBProgramNodeVisitor)>>visitNode:
OCASTSemanticAnalyzer>>analyze:
RBMethodNode>>doSemanticAnalysis
[ ast doSemanticAnalysis ] in OpalCompiler>>doSemanticAnalysis in Block: [ ast doSemanticAnalysis ]
BlockClosure>>on:do:
OpalCompiler>>doSemanticAnalysis
[ self parse.
self transformDoit.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self transformDoit.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile in Block: [ self parse....
BlockClosure>>on:do:
[ [ self parse.
self transformDoit.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile in Block: [ [ self parse....
BlockClosure>>on:do:
OpalCompiler>>compile
OpalCompiler>>evaluate
[0m