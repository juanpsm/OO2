TestCase subclass: #PersonTest	instanceVariableNames: 'john jane'	classVariableNames: ''	poolDictionaries: ''	category: 'SocialNetworkBasics-Tests'!!PersonTest commentStamp: '<historical>' prior: 0!A PersonTest is a test class for testing the behavior of Person!!PersonTest methodsFor: 'test-initialization' stamp: 'Casco 6/16/2015 14:20'!setUp  john := Person fullName: 'John Doe' email: 'john@doe.com'.  jane := Person fullName: 'Jane Doe' email: 'jane@doe.com'.! !!PersonTest methodsFor: 'testing - access' stamp: 'Casco 5/14/2016 16:40'!testUnfollow	john follow: jane.	self assert: (john follows includes: jane).	self assert: (jane followers includes: john).	self assert: john follows size == 1.	self assert: john followers isEmpty.	self assert: jane follows isEmpty.	self assert: jane followers size == 1.	john unfollow: jane.	self assert: john follows isEmpty.	self assert: john followers isEmpty.	self assert: jane follows isEmpty.	self assert: jane followers isEmpty.! !!PersonTest methodsFor: 'testing - access' stamp: 'Casco 5/14/2016 16:41'!testRemoveFollower	jane addFollower: john.	self assert: (john follows includes: jane).	self assert: (jane followers includes: john).	self assert: john follows size == 1.	self assert: john followers isEmpty.	self assert: jane follows isEmpty.	self assert: jane followers size == 1.	jane removeFollower: john.	self assert: john follows isEmpty.	self assert: john followers isEmpty.	self assert: jane follows isEmpty.	self assert: jane followers isEmpty! !!PersonTest methodsFor: 'testing - access' stamp: 'af 5/17/2014 22:35'!testFollow	self assert: john follows isEmpty.	self assert: john followers isEmpty.	self assert: jane follows isEmpty.	self assert: jane followers isEmpty.	john follow: jane.	self assert: (john follows includes: jane).	self assert: (jane followers includes: john).	self assert: john follows size == 1.	self assert: john followers isEmpty.	self assert: jane follows isEmpty.	self assert: jane followers size == 1! !!PersonTest methodsFor: 'testing - access' stamp: 'af 5/17/2014 22:37'!testAddFollower	self assert: john follows isEmpty.	self assert: john followers isEmpty.	self assert: jane follows isEmpty.	self assert: jane followers isEmpty.	jane addFollower: john.	self assert: (john follows includes: jane).	self assert: (jane followers includes: john).	self assert: john follows size == 1.	self assert: john followers isEmpty.	self assert: jane follows isEmpty.	self assert: jane followers size == 1! !TestCase subclass: #SocialNetworkTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SocialNetworkBasics-Tests'!!SocialNetworkTest commentStamp: '<historical>' prior: 0!A SocialNetworkTest is a test class for testing the behavior of SocialNetwork!!SocialNetworkTest methodsFor: 'testing' stamp: 'af 5/18/2014 11:58'!testCompleteCreation    | instance |    instance := SocialNetwork  named: 'Twitter'.    self assert: instance name == 'Twitter'.    self assert: instance users isEmpty.! !WAComponent subclass: #PersonComponent	instanceVariableNames: 'person socialNetwork'	classVariableNames: ''	poolDictionaries: ''	category: 'SocialNetworkBasics-WebApplication'!!PersonComponent commentStamp: 'Casco 3/24/2019 20:10' prior: 0!A PersonComponent is a WAComponent to display all properties of a person.WAAdmin register: PersonComponent  asApplicationAt: 'randomPerson'Instance Variables	person:		<Object>person	- is the person I display!!PersonComponent methodsFor: 'rendering' stamp: 'Casco 5/16/2016 22:08'!renderContentOn: htmlCanvas	htmlCanvas anchor		callback: [ self showHomeScreen ];		with: 'Home'.	htmlCanvas horizontalRule.	self renderContactInfoOn: htmlCanvas.	self renderFollowsListOn: htmlCanvas.	self renderFollowersListOn: htmlCanvas.	self renderEveryoneElseListOn: htmlCanvas! !!PersonComponent methodsFor: 'rendering' stamp: 'af 5/24/2014 23:21'!showHomeScreen   self show: (SocialNetworkComponent new)! !!PersonComponent methodsFor: 'rendering' stamp: 'Casco 5/16/2016 21:47'!renderFollowersListOn: htmlCanvas	| list |	list := person followers.	htmlCanvas heading		level: 2;		with: 'Followers (' , list size printString , ') :'.	self renderPersonList: list on: htmlCanvas! !!PersonComponent methodsFor: 'rendering' stamp: 'Casco 5/16/2016 21:46'!renderEveryoneElseListOn: htmlCanvas	| list |	list := socialNetwork users copy.	list removeAllFoundIn: person follows.	list removeAllFoundIn: person followers. 	list remove: person ifAbsent: [].	htmlCanvas heading		level: 2;		with: 'Everyone else (' , list size printString , ') :'.	self renderPersonList: list on: htmlCanvas  ! !!PersonComponent methodsFor: 'rendering' stamp: 'Casco 5/16/2016 21:46'!renderPerson: each on: htmlCanvas	^ htmlCanvas		tableRow: [ 			htmlCanvas tableData: each fullName.			htmlCanvas				tableData: [ 					htmlCanvas anchor						callback: [ self showDetailsOf: each ];						with: '(see details)' ].			htmlCanvas				tableData: [ 					(person follows includes: each)						ifFalse: [ 							htmlCanvas anchor								callback: [ person follow: each ];								with: '(follow)' ] 						ifTrue: [ htmlCanvas anchor								callback: [ person unfollow: each ];								with: '(unfollow)' ] ] ]! !!PersonComponent methodsFor: 'rendering' stamp: 'Casco 5/16/2016 21:46'!renderFollowsListOn: htmlCanvas	| list |	list := person follows.	htmlCanvas heading		level: 2;		with: 'Follows (' , list size printString , ') :'.	self renderPersonList: list on: htmlCanvas! !!PersonComponent methodsFor: 'rendering' stamp: 'Casco 5/16/2016 21:46'!renderContactInfoOn: htmlCanvas	htmlCanvas		heading: person fullName;		strong: 'Email: ';		render: person email.! !!PersonComponent methodsFor: 'rendering' stamp: 'Casco 5/16/2016 21:47'!renderPersonList: list on: htmlCanvas	htmlCanvas table: [ list do: [ :each | self renderPerson: each on: htmlCanvas ] ]! !!PersonComponent methodsFor: 'callbacks' stamp: 'af 5/18/2014 16:53'!showDetailsOf: aPerson     self show: (PersonComponent  on: aPerson for:  socialNetwork)! !!PersonComponent methodsFor: 'initialize' stamp: 'Casco 3/24/2019 20:14'!initialize	super initialize.	socialNetwork := SocialNetwork example.	person := socialNetwork users any! !!PersonComponent methodsFor: 'initialize' stamp: 'af 5/18/2014 16:48'!on: aPerson for: sn	person := aPerson.	socialNetwork := sn.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersonComponent class	instanceVariableNames: ''!!PersonComponent class methodsFor: 'instance creation' stamp: 'af 5/18/2014 16:47'!on: aPerson for: aSocialNetwork  ^self new on: aPerson for: aSocialNetwork.! !WAComponent subclass: #PersonEditorComponent	instanceVariableNames: 'person name email'	classVariableNames: ''	poolDictionaries: ''	category: 'SocialNetworkBasics-WebApplication'!!PersonEditorComponent commentStamp: 'af 5/17/2014 23:26' prior: 0!A PersonEditorComponent is the mechanism to edit contact information of users.Instance Variables	person:		<Person>person	- a Person being edited!!PersonEditorComponent methodsFor: 'rendering' stamp: 'af 5/18/2014 15:23'!cancel    person := nil.    self answer! !!PersonEditorComponent methodsFor: 'rendering' stamp: 'Casco 5/16/2016 21:47'!renderContentOn: htmlCanvas	htmlCanvas		form: [ 			htmlCanvas text: 'Full name: '.			htmlCanvas textInput on: #name of: self.			htmlCanvas break.			htmlCanvas text: 'Email address: '.			htmlCanvas textInput on: #email of: self.			htmlCanvas break.			htmlCanvas submitButton				callback: [ self save ];				value: 'Save'.			htmlCanvas submitButton				callback: [ self cancel ];				value: 'Cancel' ]! !!PersonEditorComponent methodsFor: 'rendering' stamp: 'Casco 5/17/2015 19:15'!save    person fullName: name.    person email: email.     self answer! !!PersonEditorComponent methodsFor: 'initialize' stamp: 'Casco 5/17/2015 19:12'!on: aPerson  person := aPerson .  name := person name.  email := person email. ! !!PersonEditorComponent methodsFor: 'accesing' stamp: 'Casco 5/17/2015 19:14'!email: aString   email := aString. ! !!PersonEditorComponent methodsFor: 'accesing' stamp: 'Casco 5/17/2015 19:14'!name: aString   name := aString. ! !!PersonEditorComponent methodsFor: 'accesing' stamp: 'Casco 5/17/2015 19:14'!name   ^name ! !!PersonEditorComponent methodsFor: 'accesing' stamp: 'af 5/18/2014 15:08'!person	^ person! !!PersonEditorComponent methodsFor: 'accesing' stamp: 'Casco 5/17/2015 19:14'!email   ^email . ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersonEditorComponent class	instanceVariableNames: ''!!PersonEditorComponent class methodsFor: 'instance creation' stamp: 'Casco 6/16/2015 14:20'!onNewPerson	^ self new on: (Person fullName: 'some name' email: 'valid email')! !!PersonEditorComponent class methodsFor: 'instance creation' stamp: 'af 5/17/2014 23:29'!on: aPerson  ^self new on: aPerson.! !WAComponent subclass: #SocialNetworkComponent	instanceVariableNames: 'socialNetwork'	classVariableNames: ''	poolDictionaries: ''	category: 'SocialNetworkBasics-WebApplication'!!SocialNetworkComponent commentStamp: 'Casco 3/24/2019 20:10' prior: 0!A SocialNetworkComponent is a Seaside component to display a list of Persons. It also allows adding new persons to the system WAAdmin register: SocialNetworkComponent  asApplicationAt: 'SocialNetwork'Instance Variables	persons:		Set of <Person>persons	- list of persons available in the System!!SocialNetworkComponent methodsFor: 'callbacks' stamp: 'Casco 3/24/2019 20:24'!showDetailsOf: aPerson     self show: (PersonComponent on: aPerson for: socialNetwork).! !!SocialNetworkComponent methodsFor: 'callbacks' stamp: 'Casco 3/24/2019 19:58'!newPersonDialog	| editor |	editor := PersonEditorComponent onNewPerson. 	self call: editor.	editor person ifNotNil: [ socialNetwork addUser: editor person ]! !!SocialNetworkComponent methodsFor: 'callbacks' stamp: 'Casco 3/24/2019 20:03'!random     socialNetwork := SocialNetwork example.! !!SocialNetworkComponent methodsFor: 'callbacks' stamp: 'af 5/18/2014 15:34'!edit: aPerson     self call: (PersonEditorComponent on: aPerson).! !!SocialNetworkComponent methodsFor: 'initialization' stamp: 'Casco 3/24/2019 20:02'!initialize	super initialize.	socialNetwork := SocialNetwork named: 'Unnamed network'! !!SocialNetworkComponent methodsFor: 'rendering' stamp: 'Casco 5/16/2016 21:43'!renderContentOn: htmlCanvas	self renderUpperToolbarOn: htmlCanvas.	self renderUsersOn: htmlCanvas.	self renderLowerToolbarOn: htmlCanvas! !!SocialNetworkComponent methodsFor: 'rendering' stamp: 'Casco 5/16/2016 21:48'!renderUpperToolbarOn: htmlCanvas	htmlCanvas anchor		callback: [ self newPersonDialog ];		with: '[Add new user]'.	htmlCanvas horizontalRule! !!SocialNetworkComponent methodsFor: 'rendering' stamp: 'Casco 5/16/2016 21:45'!renderUser: each on: htmlCanvas	^ htmlCanvas		tableRow: [ 			htmlCanvas tableData: each fullName.			htmlCanvas				tableData: [ 							htmlCanvas anchor								callback: [ self showDetailsOf: each ];								with: ' (see details)' ];				tableData: [ 							htmlCanvas anchor								callback: [ self edit: each ];								with: ' (edit contact info)' ] ]! !!SocialNetworkComponent methodsFor: 'rendering' stamp: 'Casco 3/24/2019 20:43'!renderUsersOn: htmlCanvas	htmlCanvas		strong: 'Users :';		break.	htmlCanvas table: [ socialNetwork  users do: 		                       [ :each | self renderUser: each on: htmlCanvas ] ]! !!SocialNetworkComponent methodsFor: 'rendering' stamp: 'Casco 3/24/2019 20:02'!renderLowerToolbarOn: htmlCanvas	htmlCanvas horizontalRule.	htmlCanvas anchor		callback: [ self random ];		with: '[Random network]'.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SocialNetworkComponent class	instanceVariableNames: ''!!SocialNetworkComponent class methodsFor: 'initialize' stamp: 'Casco 3/24/2019 20:09'!initialize   WAAdmin register: self asApplicationAt: 'SocialNetwork'! !SocialNetworkComponent initialize!Object subclass: #Person	instanceVariableNames: 'followers follows fullName email'	classVariableNames: ''	poolDictionaries: ''	category: 'SocialNetworkBasics-Model'!!Person commentStamp: 'Casco 5/14/2016 16:55' prior: 0!A Person is someone in a social network such as twitter.Follow relationships are not bi-directional. follows and followers relationships are kept consistent by the #follow:  messaje (the only mechanism to create relationships)Instance Variables	email:		<String>	followers:		Set of <Person>	follows:		Set of <Person>	name:		<String>email	- obviousfollowers	- Persons that follow mefollows	- Persons I followname	- obvious!!Person methodsFor: 'initialize' stamp: 'Casco 6/16/2015 14:16'!initialize      follows := Set new.      followers := Set new.! !!Person methodsFor: 'accessing' stamp: 'Casco 4/16/2017 19:58'!email: aString	email := aString.! !!Person methodsFor: 'accessing' stamp: 'Casco 4/16/2017 19:59'!removeFollower: aPerson	followers remove: aPerson.	(aPerson follows includes: self)		ifTrue: [ aPerson unfollow: self ].! !!Person methodsFor: 'accessing' stamp: 'af 5/17/2014 23:54'!fullName  ^fullName! !!Person methodsFor: 'accessing' stamp: 'af 5/18/2014 12:13'!name  ^fullName! !!Person methodsFor: 'accessing' stamp: 'Casco 4/16/2017 19:59'!unfollow: aPerson	follows remove: aPerson.	(aPerson followers includes: self)		ifTrue: [ aPerson removeFollower: self ].! !!Person methodsFor: 'accessing' stamp: 'af 5/17/2014 23:58'!email  ^email! !!Person methodsFor: 'accessing' stamp: 'Casco 4/16/2017 19:58'!follow: aPerson	follows add: aPerson.	(aPerson followers includes: self)		ifFalse: [ aPerson addFollower: self ].! !!Person methodsFor: 'accessing' stamp: 'Casco 4/16/2017 19:58'!addFollower: aPerson	followers add: aPerson.	(aPerson follows includes: self)		ifFalse: [ aPerson follow: self ].! !!Person methodsFor: 'accessing' stamp: 'Casco 4/16/2017 19:58'!fullName: aString	fullName := aString.! !!Person methodsFor: 'accessing' stamp: 'Casco 5/31/2015 23:44'!numberOfFollowers	^ self followers size! !!Person methodsFor: 'accessing' stamp: 'AF 5/24/2014 18:27'!printOn: aStream      super printOn: aStream.	aStream nextPutAll: ' (', self fullName, ')'  ! !!Person methodsFor: 'accessing' stamp: 'af 5/17/2014 22:08'!follows	^ follows! !!Person methodsFor: 'accessing' stamp: 'af 5/17/2014 22:09'!followers	^ followers! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Person class	instanceVariableNames: ''!!Person class methodsFor: 'instance creation' stamp: 'Casco 6/16/2015 14:20'!fullName: theName email: email 	^self new fullName: theName; email: email; yourself ! !Object subclass: #SocialNetwork	instanceVariableNames: 'users name'	classVariableNames: ''	poolDictionaries: ''	category: 'SocialNetworkBasics-Model'!!SocialNetwork commentStamp: 'af 5/18/2014 11:53' prior: 0!A SocialNetwork is a social network.Instance Variables	name:		<String>	users:		Set of <Person>name	- some name for our network, such as Twitterusers	- all users in the network regardless of their connections!!SocialNetwork methodsFor: 'accessing' stamp: 'Casco 4/16/2017 19:59'!addUser: aPerson	self users add: aPerson.! !!SocialNetwork methodsFor: 'accessing' stamp: 'af 5/18/2014 11:53'!name: anObject	name := anObject! !!SocialNetwork methodsFor: 'accessing' stamp: 'af 5/18/2014 11:54'!name	^ name! !!SocialNetwork methodsFor: 'accessing' stamp: 'af 5/18/2014 12:00'!users	^ users ifNil: [ users := Set new ]! !!SocialNetwork methodsFor: 'accessing' stamp: 'af 6/8/2014 19:52'!connections	| connections |	connections := Set new.	self users do: [ :user | user follows do: [ :followed | connections add: user -> followed ] ].	^ connections! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SocialNetwork class	instanceVariableNames: 'singleton'!!SocialNetwork class methodsFor: 'instance creation' stamp: 'af 5/18/2014 11:58'!named: aString 	^self new name: aString; yourself .! !!SocialNetwork class methodsFor: 'utility' stamp: 'Casco 3/24/2019 20:14'!example	"Creates a bunch of users and connects them randomly in aSocialNetwork "	| names probabilities example |	example := SocialNetwork named: 'Example network'.	names := #('Sir Isaac Newton' 'Louis Pasteur ' 'Marie Curie' 'Albert Einstein' 'Charles Darwin' 'Nikola Tesla' 'James Clerk Maxwell' 'Michael Faraday ').	names do: [ :each | example addUser: (Person fullName: each email: each asValidSelector , '@science.com') ].	probabilities := #(1 2 4 9 8 0 7 2 8 3 8 7 6 8 1 4 9 7 5 4 9 1 8 9 7 7 1 8 1 4 6 9 2 7 5 5 4 7 1 6 2 6 2 9 2 4 4 3 9 6 1 3 4 6 1 4 9 3 6 5 6 8 1 0)		readStream.	example users		do: [ :first | 			example users				do: [ :second | 					first ~= second						ifTrue: [ probabilities next >= 7								ifTrue: [ first follow: second ] ] ] ].	^ example! !